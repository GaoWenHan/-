import { default as React, ReactNode } from 'react';
import { PopupProps } from '../popup/popup.taro';
import { CascaderOption, CascaderValue, CascaderOptionKey } from './types';
export interface CascaderProps extends Pick<PopupProps, 'className' | 'style' | 'closeIcon' | 'closeable' | 'title' | 'left' | 'closeIconPosition' | 'onClose'> {
    popup: boolean;
    popupProps: Partial<Omit<PopupProps, 'closeIcon' | 'closeable' | 'title' | 'left' | 'closeIconPosition' | 'onClose'>>;
    visible: boolean;
    activeColor: string;
    activeIcon: string;
    options: CascaderOption[];
    value?: CascaderValue;
    defaultValue?: CascaderValue;
    optionKey: CascaderOptionKey;
    format: Record<string, string | number | null>;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: ReactNode;
    lazy: boolean;
    onLoad: (node: any, resolve: any) => void;
    onChange: (value: CascaderValue, params?: any) => void;
    onPathChange: (value: CascaderValue, params: any) => void;
}
export type CascaderActions = {
    open: () => void;
    close: () => void;
};
export declare const Cascader: React.ForwardRefExoticComponent<Partial<CascaderProps> & {
    children?: ReactNode | undefined;
} & React.RefAttributes<unknown>>;
