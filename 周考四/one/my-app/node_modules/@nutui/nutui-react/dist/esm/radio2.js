import { _ as __rest } from "./tslib.es6.js";
import React__default, { useContext } from "react";
import { CheckDisabled, CheckChecked, CheckNormal } from "@nutui/icons-react";
import classNames from "classnames";
import RadioGroup__default from "./RadioGroup.js";
import { C as ComponentDefaults } from "./typings.js";
import { u as usePropsValue } from "./use-props-value.js";
const RadioContext = React__default.createContext(null);
const defaultProps = Object.assign(Object.assign({}, ComponentDefaults), { disabled: false, shape: "round", value: "", labelPosition: "right", icon: null, activeIcon: null, onChange: (checked) => {
} });
const Radio = (props) => {
  const classPrefix = "nut-radio";
  const _a = Object.assign(Object.assign({}, defaultProps), props), { children, className, style, checked, defaultChecked, shape, value, icon, activeIcon, onChange } = _a, others = __rest(_a, ["children", "className", "style", "checked", "defaultChecked", "shape", "value", "icon", "activeIcon", "onChange"]);
  let { labelPosition, disabled } = others, rest = __rest(
    others,
    ["labelPosition", "disabled"]
  );
  let [checkedStatement, setCheckedStatement] = usePropsValue({
    value: checked,
    defaultValue: defaultChecked,
    finalValue: false,
    onChange
  });
  const context = useContext(RadioContext);
  if (context) {
    checkedStatement = context.value === value;
    if (context.labelPosition !== void 0) {
      labelPosition = context.labelPosition;
    }
    if (context.disabled !== void 0) {
      disabled = context.disabled;
    }
    setCheckedStatement = (value2) => {
      if (value2) {
        context.check(props.value === void 0 ? "" : props.value);
      } else {
        context.uncheck();
      }
    };
  }
  const color = () => {
    return {
      [`${classPrefix}-icon-disabled`]: disabled,
      [`${classPrefix}-icon`]: !checkedStatement,
      [`${classPrefix}-icon-checked`]: checkedStatement
    };
  };
  const renderIcon = () => {
    const { icon: icon2, activeIcon: activeIcon2 } = props;
    if (disabled && !checkedStatement) {
      return React__default.createElement(CheckDisabled, { className: classNames(color()) });
    }
    if (checkedStatement) {
      return React__default.isValidElement(activeIcon2) ? React__default.cloneElement(activeIcon2, Object.assign(Object.assign({}, activeIcon2.props), { className: classNames(color()) })) : React__default.createElement(CheckChecked, { className: classNames(color()) });
    }
    return React__default.isValidElement(icon2) ? React__default.cloneElement(icon2, Object.assign(Object.assign({}, icon2.props), { className: classNames(color()) })) : React__default.createElement(CheckNormal, { className: classNames(color()) });
  };
  const renderLabel = () => {
    const labelcls = classNames(`${classPrefix}-label`, {
      [`${classPrefix}-label-disabled`]: disabled
    });
    return React__default.createElement(
      React__default.Fragment,
      null,
      renderIcon(),
      React__default.createElement("div", { className: labelcls }, children)
    );
  };
  const renderButton = () => {
    const buttoncls = classNames(`${classPrefix}-button`, {
      [`${classPrefix}-button-active`]: checkedStatement,
      [`${classPrefix}-button-disabled`]: disabled
    });
    return React__default.createElement("div", { className: buttoncls }, children);
  };
  const renderByShape = (shape2) => {
    return shape2 === "button" ? renderButton() : renderLabel();
  };
  const renderRadioItem = () => {
    return renderByShape(context && context.shape ? context.shape : shape);
  };
  const handleClick = (e) => {
    if (disabled || checkedStatement)
      return;
    setCheckedStatement(!checkedStatement);
  };
  const cls = classNames(classPrefix, {
    [`${classPrefix}-reverse`]: labelPosition === "left"
  }, className);
  return React__default.createElement("div", Object.assign({ className: cls, style, onClick: handleClick }, rest), renderRadioItem());
};
Radio.displayName = "NutRadio";
Radio.Group = RadioGroup__default;
export {
  Radio as R,
  RadioContext as a
};
