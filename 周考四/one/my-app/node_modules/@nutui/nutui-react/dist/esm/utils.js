import { i as isEqual, d as date2Str, g as getNumTwoBit } from "./date.js";
const splitDate = (date) => {
  const split = date.indexOf("-") !== -1 ? "-" : "/";
  return date.split(split);
};
const isMultiple = (day, days) => {
  if (days.length > 0) {
    return days.some((item) => {
      return isEqual(item, day);
    });
  }
  return false;
};
const isCurrDay = (month, day) => {
  const date = `${month.curData[0]}/${month.curData[1]}/${day}`;
  return isEqual(date, date2Str(/* @__PURE__ */ new Date(), "/"));
};
const getCurrDate = (day, month) => {
  return `${month.curData[0]}/${month.curData[1]}/${getNumTwoBit(+day.day)}`;
};
const isStart = (day, days) => {
  return isEqual(days[0], day);
};
const isEnd = (day, days) => {
  return isEqual(days[1], day);
};
const isStartAndEnd = (days) => {
  return days.length >= 2 && isEqual(days[0], days[1]);
};
const getPreMonths = (type, year, month) => {
  const preMonth = +month - 1;
  const months = Array.from(Array(preMonth), (v, k) => {
    return {
      year,
      month: k + 1,
      yearAndMonth: formatMonth(year, k + 1),
      type
    };
  });
  return months;
};
const getMonths = (type, year, month, endMonth = 12) => {
  const nextMonth = endMonth - month + 1;
  const months = Array.from(Array(nextMonth), (v, k) => {
    return {
      year,
      month: k + month,
      yearAndMonth: formatMonth(year, k + month),
      type
    };
  });
  return months;
};
const formatMonth = (year, month) => {
  return `${year}-${String(month).padStart(2, "0")}`;
};
const formatQuarter = (year, quarter) => {
  return `${year}-Q${quarter}`;
};
const getQuarter = (month) => {
  if (month < 1 || month > 12) {
    throw new Error("月份必须在 1 到 12 之间");
  }
  const quarter = Math.floor((month - 1) / 3) + 1;
  return quarter;
};
const getQuarters = (type, year, month, endMonth = 12) => {
  const quarters = [];
  const startIndex = month;
  const endIndex = endMonth;
  for (let index = startIndex; index <= endIndex; index += 3) {
    const quarter = getQuarter(index);
    quarters.push({
      year,
      quarter,
      yearAndQuarter: formatQuarter(year, quarter),
      type
    });
  }
  return quarters;
};
const getPreQuarters = (type, year, month) => {
  const quarters = [];
  const startIndex = 1;
  const endIndex = month - 3;
  for (let index = startIndex; index <= endIndex; index += 3) {
    const quarter = getQuarter(index);
    quarters.push({
      year,
      quarter,
      yearAndQuarter: formatQuarter(year, quarter),
      type
    });
  }
  return quarters;
};
const getNextQuarters = (type, year, month, endMonth = 12) => {
  const quarters = [];
  const startIndex = month + 3;
  const endIndex = endMonth;
  for (let index = startIndex; index <= endIndex; index += 3) {
    const quarter = getQuarter(index);
    quarters.push({
      year,
      quarter,
      yearAndQuarter: formatQuarter(year, quarter),
      type
    });
  }
  return quarters;
};
export {
  getMonths as a,
  getPreQuarters as b,
  getQuarters as c,
  getNextQuarters as d,
  getCurrDate as e,
  isEnd as f,
  getPreMonths as g,
  isMultiple as h,
  isStart as i,
  isCurrDay as j,
  isStartAndEnd as k,
  splitDate as s
};
